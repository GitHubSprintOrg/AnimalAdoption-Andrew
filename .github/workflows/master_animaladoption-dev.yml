# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - animaladoption-dev

on:
#   push:
#     branches:
#       - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 3.1.x
          # dotnet-version: 3.1.301

        # These flags below can be used for Nuget pushing
        # source-url: https://nuget.pkg.github.com/TravisHuntingAWARE/index.json
        # env:
        # NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies for all projects
        run: dotnet restore

      - name: Build all projects
        run: dotnet build --configuration Release --no-restore

      # This also works for publishing
      # - name: Publish Application
      #   run: dotnet publish --output taa-portal

      - name: Publish portal project in Release mode
        run: dotnet publish ${{ github.workspace }}/AnimalAdoption.Web.Portal/AnimalAdoption.Web.Portal.csproj --configuration Release --no-build --output ./taa-portal/

      - name: List out directory contents
        run: |
          echo "Listing the contents of the GitHub workspace directory"
          ls ${{ github.workspace }}
          echo "Recursively listing all contents of the current directory"
          ls -R
      - name: Upload a Build Artifact for Web Portal
        uses: actions/upload-artifact@v2.1.3
        with:
          name: drop
          path: ${{ github.workspace }}/taa-portal/
          if-no-files-found: error

      - name: Upload a build artifact for the functional tests
        uses: actions/upload-artifact@v2.1.3
        with:
          name: functional-tests
          path: ${{ github.workspace }}/AnimalAdoption.Web.Portal.FunctionalTests/bin/Release/netcoreapp3.1/*
          if-no-files-found: error

#       - name: Upload a build artifact for the Bicep template
#         uses: actions/upload-artifact@v2.1.3
#         with:
#           name: bicep-template
#           path: deploy.bicep
#           if-no-files-found: error

      - name: Unit Tests 1
        run: dotnet vstest ${{ github.workspace }}/AnimalAdoption.Web.Portal.UnitTests/bin/Release/netcoreapp3.1/AnimalAdoption.Web.Portal.UnitTests.dll

      - name: Unit Tests 2
        run: dotnet test ${{ github.workspace }}/AnimalAdoption.Web.Portal.UnitTests/bin/Release/netcoreapp3.1/AnimalAdoption.Web.Portal.UnitTests.dll

      - name: Unit Tests 3
        run: dotnet test ${{ github.workspace }}/AnimalAdoption.Web.Portal.UnitTests/AnimalAdoption.Web.Portal.UnitTests.csproj --verbosity normal --configuration Release

      - name: Unit Tests 4
        run: dotnet test

#       - name: Pack CommonLogic project for NuGet
#         run: dotnet pack AnimalAdoption.Common.Logic.csproj --configuration Release --no-build -p:PackageVersion=$PKG_VERSION
#         working-directory: ${{ github.workspace }}/AnimalAdoption.Common.Logic/
#         shell: bash
#         env:
#           PKG_VERSION: 1.0.0

#       - name: Push the CommonLogic NuGet package
#         # this also works when run with the 'source-url' and "env -> NUGET_AUTH_TOKEN" options in the "Setup .NET Core" step
#         # gives a warning that you should use the --api-key option however
#         # run: dotnet nuget push  ${{ github.workspace }}/AnimalAdoption.Common.Logic/bin/Release/*.nupkg --skip-duplicate
#         # The secret "GITHUB_TOKEN" is created for you automatically by github
#         run: |
#           dotnet nuget push "${{ github.workspace }}/AnimalAdoption.Common.Logic/bin/Release/*.nupkg" \
#             --skip-duplicate \
#             --api-key ${{ secrets.GITHUB_TOKEN }} \
#             --source https://nuget.pkg.github.com/${{ github.repository_owner }}
  deploy-dev:
      runs-on: windows-latest
      needs: build
      environment:
        name: "production"
        url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

      steps:
        - name: Download artifact from build job
          uses: actions/download-artifact@v2
          with:
            name: drop

        - name: Deploy to Azure Web App
          id: deploy-to-webapp
          uses: azure/webapps-deploy@v2
          with:
            app-name: "dev-animaladoption"
            slot-name: "production"
            publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_EAF0963BD953415B9D785EBD9415959C }}
            package: .
          
          
#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: 'Production'
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v2
#         with:
#           name: .net-app

#       - name: Deploy to Azure Web App
#         id: deploy-to-webapp
#         uses: azure/webapps-deploy@v2
#         with:
#           app-name: 'animaladoption-dev'
#           slot-name: 'Production'
#           publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_EAF0963BD953415B9D785EBD9415959C }}
#           package: .
